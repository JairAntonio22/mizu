// Code generated by "stringer -type=TokType"; DO NOT EDIT.

package structs

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokTypeEof-0]
	_ = x[TokTypeColon-1]
	_ = x[TokTypeSemicolon-2]
	_ = x[TokTypeLParen-3]
	_ = x[TokTypeRParen-4]
	_ = x[TokTypeLBrace-5]
	_ = x[TokTypeRBrace-6]
	_ = x[TokTypeLBracket-7]
	_ = x[TokTypeRBracket-8]
	_ = x[TokTypeDefConst-9]
	_ = x[TokTypeDefVar-10]
	_ = x[TokTypeAdd-11]
	_ = x[TokTypeSub-12]
	_ = x[TokTypeMul-13]
	_ = x[TokTypeDiv-14]
	_ = x[TokTypeMod-15]
	_ = x[TokTypeLess-16]
	_ = x[TokTypeGreat-17]
	_ = x[TokTypeLeq-18]
	_ = x[TokTypeGeq-19]
	_ = x[TokTypeDot-20]
	_ = x[TokTypeQuestion-21]
	_ = x[TokTypeIf-22]
	_ = x[TokTypeElse-23]
	_ = x[TokTypeSwitch-24]
	_ = x[TokTypeCase-25]
	_ = x[TokTypeLoop-26]
	_ = x[TokTypeSkip-27]
	_ = x[TokTypeBreak-28]
	_ = x[TokTypeReturn-29]
	_ = x[TokTypeNot-30]
	_ = x[TokTypeAnd-31]
	_ = x[TokTypeOr-32]
	_ = x[TokTypeTrue-33]
	_ = x[TokTypeFalse-34]
	_ = x[TokTypeNil-35]
	_ = x[TokTypeId-36]
	_ = x[TokTypeInteger-37]
	_ = x[TokTypeFloat-38]
	_ = x[TokTypeString-39]
}

const _TokType_name = "TokTypeEofTokTypeColonTokTypeSemicolonTokTypeLParenTokTypeRParenTokTypeLBraceTokTypeRBraceTokTypeLBracketTokTypeRBracketTokTypeDefConstTokTypeDefVarTokTypeAddTokTypeSubTokTypeMulTokTypeDivTokTypeModTokTypeLessTokTypeGreatTokTypeLeqTokTypeGeqTokTypeDotTokTypeQuestionTokTypeIfTokTypeElseTokTypeSwitchTokTypeCaseTokTypeLoopTokTypeSkipTokTypeBreakTokTypeReturnTokTypeNotTokTypeAndTokTypeOrTokTypeTrueTokTypeFalseTokTypeNilTokTypeIdTokTypeIntegerTokTypeFloatTokTypeString"

var _TokType_index = [...]uint16{0, 10, 22, 38, 51, 64, 77, 90, 105, 120, 135, 148, 158, 168, 178, 188, 198, 209, 221, 231, 241, 251, 266, 275, 286, 299, 310, 321, 332, 344, 357, 367, 377, 386, 397, 409, 419, 428, 442, 454, 467}

func (i TokType) String() string {
	if i >= TokType(len(_TokType_index)-1) {
		return "TokType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokType_name[_TokType_index[i]:_TokType_index[i+1]]
}
